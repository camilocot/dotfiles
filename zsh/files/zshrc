# debug zsh startup time
# Inject profiling code
# zmodload zsh/zprof

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Look in ~/.oh-my-zsh/themes/
ZSH_THEME="wezm"

# Enable command auto-correction.
ENABLE_CORRECTION="false"

if [ -f ~/.zsh_nocorrect ]; then
    while read -r COMMAND; do
        alias $COMMAND="nocorrect $COMMAND"
    done < ~/.zsh_nocorrect
fi

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Add / when autocomplete directories with Tab
zstyle ':completion:*' special-dirs true

# Prevent ZSH to print an error when no match can be found.
unsetopt nomatch

# Enabled plugins (plugins can be found in ~/.oh-my-zsh/plugins/*)
plugins=(git mvn vagrant coffee python common-aliases z sudo dirhistory docker jira web-search golang kubectl systemd kube-ps1 colorize dnf httpie tmux)

# Preferred editor for local and remote sessions
export EDITOR='nvim'

# Custom aliases
alias vim='nvim'
alias v='nvim'
alias vimdiff="nvim -d"
alias zshconfig="nvim ~/.zshrc"
alias ohmyzsh="nvim ~/.oh-my-zsh"
alias vimconfig='nvim ~/.vimrc'
alias nvimconfig='nvim ~/.config/nvim/config/init.vimrc'
alias tmuxconfig='nvim ~/.tmux.conf'
alias yum='dnf'
alias rmfailmvndonloads='find ~/.m2  -name "*.lastUpdated" -exec grep -q "Could not transfer" {} \; -print -exec rm {} \;'
alias rmmvnsnapshot='find ~/.m2/repository -name \*SNAPSHOT -type d -print0 | xargs -0 rm -rf'
alias ipy="python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"
alias tcpdumpall="sudo tcpdump -nnASs 0"
# Change to current mc directory, when exit to shell
alias mc='. /usr/libexec/mc/mc-wrapper.sh'
# Aliases available when using sudo
alias sudo='sudo '

# Dev Helpers functions
karma_debug () {
	karma start $1 --browsers=Chrome --single-run=false --debug
}
alias karmadebug=karma_debug

mvn_test_smoke_debug () {
	mvn -Dmaven.surefire.debug integration-test -Pautomation,smoke -Dspring.profiles.active=DEFAULT_USER -Dtest=$1
}
alias mvntestsmokedebug=mvn_test_smoke_debug

# Different colors per environment
custom_kube_ps1 () {

  _kube_ps1_get_context_ns

  KUBE_PS1_CTX_COLOR="green"
  if [[ $KUBE_PS1_CONTEXT == *prod* ]]; then
    KUBE_PS1_CTX_COLOR="red"
  fi

  local reset_color="%f"
  local blue="%F{blue}"
  local ctx="%F{$KUBE_PS1_CTX_COLOR}"
  local cyan="%F{cyan}"

  KUBE_PS1="${reset_color}$KUBE_PS1_PREFIX"
  KUBE_PS1+="${blue}$(_kube_ps1_symbol)"
  KUBE_PS1+="${reset_color}$KUBE_PS1_SEPERATOR"
  KUBE_PS1+="${ctx}$KUBE_PS1_CONTEXT${reset_color}"
  KUBE_PS1+="$KUBE_PS1_DIVIDER"
  KUBE_PS1+="${cyan}$KUBE_PS1_NAMESPACE${reset_color}"
  KUBE_PS1+="$KUBE_PS1_SUFFIX"

  echo "${KUBE_PS1}"
}

# NVM environment
export NVM_DIR="/home/ccota/.nvm"
alias loadnvm='[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"'

# Ruby version manager
[ -d "$HOME/.rvm/bin" ] && PATH="$PATH:$HOME/.rvm/bin"
alias loadrvm='[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"'

# VirtualEnv
alias loadve='[[ -f /usr/share/virtualenvwrapper/virtualenvwrapper.sh  ]] && . /usr/share/virtualenvwrapper/virtualenvwrapper.sh'

# VirtualEnv configuration
export WORKON_HOME=~/Envs
mkdir -p $WORKON_HOME

source $ZSH/oh-my-zsh.sh

# Golang variables
DEFAULT_USER=$USER
export GOPATH=$HOME/projects/go-workdir
export PATH="$PATH:$GOPATH/bin:${HOME}/.krew/bin:/usr/share/bcc/tools"
export GOROOT=/usr/local/go

export VAGRANT_DEFAULT_PROVIDER=virtualbox

# FZF configuration
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Display settings
export FZF_DEFAULT_OPTS='--inline-info -m --height 40% --border'
# Preview file and automatically selects the item if there's only one
export FZF_CTRL_T_OPTS="--select-1 --exit-0 --preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
# Full command on preview window"
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
# uses tree command to show the entries of the directory
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

[ -f ~/.local_config ] && source ~/.local_config

# Start tmux on every shell login
# if command -v tmux>/dev/null; then
#   [[ ! $- != *i*   ]] && [ -z $TMUX  ] && exec tmux attach
# fi

ORIG_PROMPT=$PROMPT
PROMPT='$(custom_kube_ps1)$(tf_prompt_info) '$ORIG_PROMPT

# Update zsh prompt every second, K8S context can be switched in any window/buffer
# and the prompt must be updated in any of them
# run TRAPALRM every $TMOUT seconds
TMOUT=5

TRAPALRM() {
  # https://github.com/robbyrussell/oh-my-zsh/issues/5910
  if ! [[ $WIDGET =~ ^(up|down)-line-or-beginning-search$ || $WIDGET == "fzf"* ]]; then
    # reset-prompt - this will update the prompt
    zle reset-prompt
  fi: ${ZSH_TMUX_AUTOSTART:=false}

}

# pythonrc with autocompletion
export PYTHONSTARTUP=~/.pythonrc

alias tf=terraform
alias tfw="terraform workspace"

# Terraform

tfv(){
  terraform validate -var-file=env/$(terraform workspace show).tfvars
}

tfp(){
  terraform plan -var-file=env/$(terraform workspace show).tfvars
}

tfa(){
  terraform apply -var-file=env/$(terraform workspace show).tfvars
}

tfc(){
  terraform console -var-file=env/$(terraform workspace show).tfvars
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/camilo/google-cloud-sdk/path.zsh.inc' ]; then . '/home/camilo/google-cloud-sdk/path.zsh.inc'; fi

# display what shell was doing during initialization
# zprof
