# ~/.tmux.conf

###########################################################################
# Change prefix from default (C-b) to C-a
###########################################################################

unbind -n C-b
unbind -n C-a
set -g prefix C-a

# C-a C-a to passthrough a C-a
unbind C-a
bind C-a send-key C-a

###########################################################################
# General options
###########################################################################

# scrollback size
set -g history-limit 10000

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1

# pass through xterm keys
set -g xterm-keys on

# if run as "tmux attach", create a session if one does not already exist
new-session -n $HOST

###########################################################################
# General keymap
###########################################################################

# Keep your finger on ctrl, or don't, same result
bind-key C-d detach-client
bind-key C-c new-window
bind-key C-p paste-buffer

# Redraw the client (if interrupted by wall, etc)
bind R refresh-client

# reload tmux config
unbind r
bind r \
    source-file ~/.tmux.conf \;\
    display 'Reloaded tmux config.'

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys emacs

# Use vi keybindings in copy and choice modes
# setw -g mode-keys vi

# don't rename windows automatically
set-option -g allow-rename off

# create a new window on the current directory
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

###########################################################################
# Window management / navigation
###########################################################################

# move between windows
bind-key C-h previous-window
bind-key C-l next-window

# C-\ (no prefix) to skip to last window we were in before this one
# bind -n "C-\\" last-window

# C-Space (no prefix) to tab to next window
# bind -n C-Space next-window

###########################################################################
# Pane management / navigation
###########################################################################

# Horizontal splits with s or C-s
unbind s
unbind C-s
bind-key s split-window
bind-key C-s split-window

# Vertical split with v or C-v
unbind v
unbind C-v
bind-key v split-window -h
bind-key C-v split-window -h

# C-g C-k to passthrough a C-k
# C-k is consumed for pane navigation but we want it for kill-to-eol
unbind C-k
bind C-k send-key C-k

# Pane resize in all four directions using vi bindings.
bind-key J resize-pane -D
bind-key K resize-pane -U
bind-key H resize-pane -L
bind-key L resize-pane -R

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'

bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

###########################################################################
# Mouse mode
###########################################################################

set -g mouse on

# Toggle mouse on
bind m \
    set -g mouse on \;\
    display 'Mouse: ON'

# Toggle mouse off
bind M \
    set -g mouse off \;\
    display 'Mouse: OFF'

###########################################################################
# Design changes
###########################################################################

# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse

# quiet mode
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "screen-256color"

# windows modes
setw -g clock-mode-colour colour135
setw -g mode-attr bold
setw -g mode-fg colour196
setw -g mode-bg colour238

# panes
set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour51

# statusbar
set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default]'
set -g status-interval 60
set -g status-right-length 50
set -g status-left-length 30
set -g status-left '#[fg=green](#S)'

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format '#{?window_zoomed_flag,#[fg=yellow],}#F#I [#W] '

setw -g window-status-fg colour138
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# messages
set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166
set -g message-command-fg blue
set -g message-command-bg black

###########################################################################
# Tmux Plugin Manager
###########################################################################

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'

#set -g @continuum-boot 'on'
#set -g @continuum-boot-options 'fullscreen'
set -g @continuum-restore 'on'

###########################################################################
# Local Config
###########################################################################
if-shell "test -f ~/.tmux.conf.local" "source-file ~/.tmux.conf.local"


